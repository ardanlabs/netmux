// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: misc/proto/service_agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	SetConfig(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	GetConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*StringMsg, error)
	Connect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Disconnect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	PfOn(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	PfOff(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	StartSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error)
	StopSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error)
	ResetHosts(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	Load(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Exit(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	ClusterInstall(ctx context.Context, in *ClusterInstallReq, opts ...grpc.CallOption) (*Noop, error)
	ClusterUninstall(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*StringMsg, error)
	Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Config(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*BytesMsg, error)
	Status(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StatusResponse, error)
	Monitor(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Agent_MonitorClient, error)
	Events(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Agent_EventsClient, error)
	Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) SetConfig(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Connect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Disconnect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PfOn(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/PfOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PfOff(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/PfOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StartSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/StartSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StopSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/StopSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ResetHosts(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/ResetHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/SpeedTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Load(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Exit(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ClusterInstall(ctx context.Context, in *ClusterInstallReq, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/ClusterInstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ClusterUninstall(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/ClusterUninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/agent.Agent/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Config(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*BytesMsg, error) {
	out := new(BytesMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Status(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Monitor(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Agent_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/agent.Agent/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_MonitorClient interface {
	Recv() (*StringMsg, error)
	grpc.ClientStream
}

type agentMonitorClient struct {
	grpc.ClientStream
}

func (x *agentMonitorClient) Recv() (*StringMsg, error) {
	m := new(StringMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Events(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Agent_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/agent.Agent/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_EventsClient interface {
	Recv() (*EventMsg, error)
	grpc.ClientStream
}

type agentEventsClient struct {
	grpc.ClientStream
}

func (x *agentEventsClient) Recv() (*EventMsg, error) {
	m := new(EventMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/PortScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/agent.Agent/Nc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	SetConfig(context.Context, *StringMsg) (*Noop, error)
	GetConfig(context.Context, *Noop) (*StringMsg, error)
	Connect(context.Context, *StringMsg) (*Noop, error)
	Disconnect(context.Context, *StringMsg) (*Noop, error)
	PfOn(context.Context, *StringMsg) (*Noop, error)
	PfOff(context.Context, *StringMsg) (*Noop, error)
	StartSvc(context.Context, *SvcRequest) (*Noop, error)
	StopSvc(context.Context, *SvcRequest) (*Noop, error)
	ResetHosts(context.Context, *Noop) (*Noop, error)
	SpeedTest(context.Context, *StringMsg) (*StringMsg, error)
	Load(context.Context, *StringMsg) (*Noop, error)
	Exit(context.Context, *Noop) (*Noop, error)
	ClusterInstall(context.Context, *ClusterInstallReq) (*Noop, error)
	ClusterUninstall(context.Context, *StringMsg) (*Noop, error)
	Login(context.Context, *LoginMessage) (*StringMsg, error)
	Logout(context.Context, *StringMsg) (*Noop, error)
	Config(context.Context, *Noop) (*BytesMsg, error)
	Status(context.Context, *StringMsg) (*StatusResponse, error)
	Monitor(*Noop, Agent_MonitorServer) error
	Events(*Noop, Agent_EventsServer) error
	Ping(context.Context, *StringMsg) (*StringMsg, error)
	PortScan(context.Context, *StringMsg) (*StringMsg, error)
	Nc(context.Context, *StringMsg) (*StringMsg, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) SetConfig(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedAgentServer) GetConfig(context.Context, *Noop) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAgentServer) Connect(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAgentServer) Disconnect(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedAgentServer) PfOn(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PfOn not implemented")
}
func (UnimplementedAgentServer) PfOff(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PfOff not implemented")
}
func (UnimplementedAgentServer) StartSvc(context.Context, *SvcRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSvc not implemented")
}
func (UnimplementedAgentServer) StopSvc(context.Context, *SvcRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSvc not implemented")
}
func (UnimplementedAgentServer) ResetHosts(context.Context, *Noop) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHosts not implemented")
}
func (UnimplementedAgentServer) SpeedTest(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeedTest not implemented")
}
func (UnimplementedAgentServer) Load(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedAgentServer) Exit(context.Context, *Noop) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedAgentServer) ClusterInstall(context.Context, *ClusterInstallReq) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterInstall not implemented")
}
func (UnimplementedAgentServer) ClusterUninstall(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterUninstall not implemented")
}
func (UnimplementedAgentServer) Login(context.Context, *LoginMessage) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAgentServer) Logout(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAgentServer) Config(context.Context, *Noop) (*BytesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedAgentServer) Status(context.Context, *StringMsg) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentServer) Monitor(*Noop, Agent_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedAgentServer) Events(*Noop, Agent_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedAgentServer) Ping(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAgentServer) PortScan(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortScan not implemented")
}
func (UnimplementedAgentServer) Nc(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nc not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetConfig(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetConfig(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Connect(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Disconnect(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PfOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PfOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/PfOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PfOn(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PfOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PfOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/PfOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PfOff(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StartSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StartSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/StartSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StartSvc(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StopSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StopSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/StopSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StopSvc(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ResetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ResetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/ResetHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ResetHosts(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SpeedTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SpeedTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/SpeedTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SpeedTest(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Load(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Exit(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ClusterInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ClusterInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/ClusterInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ClusterInstall(ctx, req.(*ClusterInstallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ClusterUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ClusterUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/ClusterUninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ClusterUninstall(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Login(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Logout(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Config(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Status(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Monitor(m, &agentMonitorServer{stream})
}

type Agent_MonitorServer interface {
	Send(*StringMsg) error
	grpc.ServerStream
}

type agentMonitorServer struct {
	grpc.ServerStream
}

func (x *agentMonitorServer) Send(m *StringMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Events(m, &agentEventsServer{stream})
}

type Agent_EventsServer interface {
	Send(*EventMsg) error
	grpc.ServerStream
}

type agentEventsServer struct {
	grpc.ServerStream
}

func (x *agentEventsServer) Send(m *EventMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Ping(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PortScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PortScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/PortScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PortScan(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Nc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Nc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Nc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Nc(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Agent_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Agent_GetConfig_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Agent_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Agent_Disconnect_Handler,
		},
		{
			MethodName: "PfOn",
			Handler:    _Agent_PfOn_Handler,
		},
		{
			MethodName: "PfOff",
			Handler:    _Agent_PfOff_Handler,
		},
		{
			MethodName: "StartSvc",
			Handler:    _Agent_StartSvc_Handler,
		},
		{
			MethodName: "StopSvc",
			Handler:    _Agent_StopSvc_Handler,
		},
		{
			MethodName: "ResetHosts",
			Handler:    _Agent_ResetHosts_Handler,
		},
		{
			MethodName: "SpeedTest",
			Handler:    _Agent_SpeedTest_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Agent_Load_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _Agent_Exit_Handler,
		},
		{
			MethodName: "ClusterInstall",
			Handler:    _Agent_ClusterInstall_Handler,
		},
		{
			MethodName: "ClusterUninstall",
			Handler:    _Agent_ClusterUninstall_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Agent_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Agent_Logout_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Agent_Config_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Agent_Status_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Agent_Ping_Handler,
		},
		{
			MethodName: "PortScan",
			Handler:    _Agent_PortScan_Handler,
		},
		{
			MethodName: "Nc",
			Handler:    _Agent_Nc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _Agent_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _Agent_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "misc/proto/service_agent.proto",
}
