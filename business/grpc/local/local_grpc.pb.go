// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: misc/proto/service_agent.proto

package local

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalClient interface {
	SetConfig(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	GetConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*StringMsg, error)
	Connect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Disconnect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	PfOn(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	PfOff(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	StartSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error)
	StopSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error)
	ResetHosts(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	Load(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Exit(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	ClusterInstall(ctx context.Context, in *ClusterInstallReq, opts ...grpc.CallOption) (*Noop, error)
	ClusterUninstall(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*StringMsg, error)
	Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
	Config(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*BytesMsg, error)
	Status(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StatusResponse, error)
	Monitor(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Local_MonitorClient, error)
	Events(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Local_EventsClient, error)
	Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
}

type localClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalClient(cc grpc.ClientConnInterface) LocalClient {
	return &localClient{cc}
}

func (c *localClient) SetConfig(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) GetConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Connect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Disconnect(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) PfOn(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/PfOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) PfOff(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/PfOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) StartSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/StartSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) StopSvc(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/StopSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) ResetHosts(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/ResetHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/SpeedTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Load(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Exit(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) ClusterInstall(ctx context.Context, in *ClusterInstallReq, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/ClusterInstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) ClusterUninstall(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/ClusterUninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/local.Local/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Config(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*BytesMsg, error) {
	out := new(BytesMsg)
	err := c.cc.Invoke(ctx, "/local.Local/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Status(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/local.Local/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Monitor(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Local_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Local_ServiceDesc.Streams[0], "/local.Local/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &localMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Local_MonitorClient interface {
	Recv() (*StringMsg, error)
	grpc.ClientStream
}

type localMonitorClient struct {
	grpc.ClientStream
}

func (x *localMonitorClient) Recv() (*StringMsg, error) {
	m := new(StringMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localClient) Events(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Local_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Local_ServiceDesc.Streams[1], "/local.Local/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &localEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Local_EventsClient interface {
	Recv() (*EventMsg, error)
	grpc.ClientStream
}

type localEventsClient struct {
	grpc.ClientStream
}

func (x *localEventsClient) Recv() (*EventMsg, error) {
	m := new(EventMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localClient) Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/PortScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/local.Local/Nc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalServer is the server API for Agent service.
// All implementations must embed UnimplementedLocalServer
// for forward compatibility
type LocalServer interface {
	SetConfig(context.Context, *StringMsg) (*Noop, error)
	GetConfig(context.Context, *Noop) (*StringMsg, error)
	Connect(context.Context, *StringMsg) (*Noop, error)
	Disconnect(context.Context, *StringMsg) (*Noop, error)
	PfOn(context.Context, *StringMsg) (*Noop, error)
	PfOff(context.Context, *StringMsg) (*Noop, error)
	StartSvc(context.Context, *SvcRequest) (*Noop, error)
	StopSvc(context.Context, *SvcRequest) (*Noop, error)
	ResetHosts(context.Context, *Noop) (*Noop, error)
	SpeedTest(context.Context, *StringMsg) (*StringMsg, error)
	Load(context.Context, *StringMsg) (*Noop, error)
	Exit(context.Context, *Noop) (*Noop, error)
	ClusterInstall(context.Context, *ClusterInstallReq) (*Noop, error)
	ClusterUninstall(context.Context, *StringMsg) (*Noop, error)
	Login(context.Context, *LoginMessage) (*StringMsg, error)
	Logout(context.Context, *StringMsg) (*Noop, error)
	Config(context.Context, *Noop) (*BytesMsg, error)
	Status(context.Context, *StringMsg) (*StatusResponse, error)
	Monitor(*Noop, Local_MonitorServer) error
	Events(*Noop, Local_EventsServer) error
	Ping(context.Context, *StringMsg) (*StringMsg, error)
	PortScan(context.Context, *StringMsg) (*StringMsg, error)
	Nc(context.Context, *StringMsg) (*StringMsg, error)
	mustEmbedUnimplementedLocalServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) SetConfig(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedAgentServer) GetConfig(context.Context, *Noop) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAgentServer) Connect(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAgentServer) Disconnect(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedAgentServer) PfOn(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PfOn not implemented")
}
func (UnimplementedAgentServer) PfOff(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PfOff not implemented")
}
func (UnimplementedAgentServer) StartSvc(context.Context, *SvcRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSvc not implemented")
}
func (UnimplementedAgentServer) StopSvc(context.Context, *SvcRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSvc not implemented")
}
func (UnimplementedAgentServer) ResetHosts(context.Context, *Noop) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHosts not implemented")
}
func (UnimplementedAgentServer) SpeedTest(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeedTest not implemented")
}
func (UnimplementedAgentServer) Load(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedAgentServer) Exit(context.Context, *Noop) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedAgentServer) ClusterInstall(context.Context, *ClusterInstallReq) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterInstall not implemented")
}
func (UnimplementedAgentServer) ClusterUninstall(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterUninstall not implemented")
}
func (UnimplementedAgentServer) Login(context.Context, *LoginMessage) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAgentServer) Logout(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAgentServer) Config(context.Context, *Noop) (*BytesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedAgentServer) Status(context.Context, *StringMsg) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentServer) Monitor(*Noop, Local_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedAgentServer) Events(*Noop, Local_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedAgentServer) Ping(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAgentServer) PortScan(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortScan not implemented")
}
func (UnimplementedAgentServer) Nc(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nc not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeLocalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalServer will
// result in compilation errors.
type UnsafeLocalServer interface {
	mustEmbedUnimplementedLocalServer()
}

func RegisterLocalServer(s grpc.ServiceRegistrar, srv LocalServer) {
	s.RegisterService(&Local_ServiceDesc, srv)
}

func _Local_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).SetConfig(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).GetConfig(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Connect(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Disconnect(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_PfOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).PfOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/PfOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).PfOn(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_PfOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).PfOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/PfOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).PfOff(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_StartSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).StartSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/StartSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).StartSvc(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_StopSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).StopSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/StopSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).StopSvc(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_ResetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).ResetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/ResetHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).ResetHosts(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_SpeedTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).SpeedTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/SpeedTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).SpeedTest(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Load(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Exit(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_ClusterInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).ClusterInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/ClusterInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).ClusterInstall(ctx, req.(*ClusterInstallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_ClusterUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).ClusterUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/ClusterUninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).ClusterUninstall(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Login(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Logout(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Config(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Status(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalServer).Monitor(m, &LocalMonitorServer{stream})
}

type Local_MonitorServer interface {
	Send(*StringMsg) error
	grpc.ServerStream
}

type LocalMonitorServer struct {
	grpc.ServerStream
}

func (x *LocalMonitorServer) Send(m *StringMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Local_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalServer).Events(m, &LocalEventsServer{stream})
}

type Local_EventsServer interface {
	Send(*EventMsg) error
	grpc.ServerStream
}

type LocalEventsServer struct {
	grpc.ServerStream
}

func (x *LocalEventsServer) Send(m *EventMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Local_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Ping(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_PortScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).PortScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/PortScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).PortScan(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Nc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Nc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Local/Nc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Nc(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Local_ServiceDesc is the grpc.ServiceDesc for Local service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Local_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "local.Local",
	HandlerType: (*LocalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Local_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Local_GetConfig_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Local_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Local_Disconnect_Handler,
		},
		{
			MethodName: "PfOn",
			Handler:    _Local_PfOn_Handler,
		},
		{
			MethodName: "PfOff",
			Handler:    _Local_PfOff_Handler,
		},
		{
			MethodName: "StartSvc",
			Handler:    _Local_StartSvc_Handler,
		},
		{
			MethodName: "StopSvc",
			Handler:    _Local_StopSvc_Handler,
		},
		{
			MethodName: "ResetHosts",
			Handler:    _Local_ResetHosts_Handler,
		},
		{
			MethodName: "SpeedTest",
			Handler:    _Local_SpeedTest_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Local_Load_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _Local_Exit_Handler,
		},
		{
			MethodName: "ClusterInstall",
			Handler:    _Local_ClusterInstall_Handler,
		},
		{
			MethodName: "ClusterUninstall",
			Handler:    _Local_ClusterUninstall_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Local_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Local_Logout_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Local_Config_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Local_Status_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Local_Ping_Handler,
		},
		{
			MethodName: "PortScan",
			Handler:    _Local_PortScan_Handler,
		},
		{
			MethodName: "Nc",
			Handler:    _Local_Nc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _Local_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _Local_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "misc/proto/service_local.proto",
}
