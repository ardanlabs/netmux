// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: misc/proto/proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	Ver(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyClient, error)
	ReverseProxyListen(ctx context.Context, opts ...grpc.CallOption) (Proxy_ReverseProxyListenClient, error)
	ReverseProxyWork(ctx context.Context, opts ...grpc.CallOption) (Proxy_ReverseProxyWorkClient, error)
	Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*BytesMsg, error)
	KeepAlive(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Proxy_KeepAliveClient, error)
	GetConfigs(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Bridges, error)
	StreamConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Proxy_StreamConfigClient, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*StringMsg, error)
	Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) Ver(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Ver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[0], "/proxy.Proxy/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyProxyClient{stream}
	return x, nil
}

type Proxy_ProxyClient interface {
	Send(*ConnOut) error
	Recv() (*ConnIn, error)
	grpc.ClientStream
}

type proxyProxyClient struct {
	grpc.ClientStream
}

func (x *proxyProxyClient) Send(m *ConnOut) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyProxyClient) Recv() (*ConnIn, error) {
	m := new(ConnIn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) ReverseProxyListen(ctx context.Context, opts ...grpc.CallOption) (Proxy_ReverseProxyListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[1], "/proxy.Proxy/ReverseProxyListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyReverseProxyListenClient{stream}
	return x, nil
}

type Proxy_ReverseProxyListenClient interface {
	Send(*ConnOut) error
	Recv() (*RevProxyRequest, error)
	grpc.ClientStream
}

type proxyReverseProxyListenClient struct {
	grpc.ClientStream
}

func (x *proxyReverseProxyListenClient) Send(m *ConnOut) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyReverseProxyListenClient) Recv() (*RevProxyRequest, error) {
	m := new(RevProxyRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) ReverseProxyWork(ctx context.Context, opts ...grpc.CallOption) (Proxy_ReverseProxyWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[2], "/proxy.Proxy/ReverseProxyWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyReverseProxyWorkClient{stream}
	return x, nil
}

type Proxy_ReverseProxyWorkClient interface {
	Send(*RevProxyConnIn) error
	Recv() (*RevProxyConnOut, error)
	grpc.ClientStream
}

type proxyReverseProxyWorkClient struct {
	grpc.ClientStream
}

func (x *proxyReverseProxyWorkClient) Send(m *RevProxyConnIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyReverseProxyWorkClient) Recv() (*RevProxyConnOut, error) {
	m := new(RevProxyConnOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) PortScan(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/PortScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Nc(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Nc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) SpeedTest(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*BytesMsg, error) {
	out := new(BytesMsg)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/SpeedTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) KeepAlive(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Proxy_KeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[3], "/proxy.Proxy/KeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyKeepAliveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Proxy_KeepAliveClient interface {
	Recv() (*StringMsg, error)
	grpc.ClientStream
}

type proxyKeepAliveClient struct {
	grpc.ClientStream
}

func (x *proxyKeepAliveClient) Recv() (*StringMsg, error) {
	m := new(StringMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) GetConfigs(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Bridges, error) {
	out := new(Bridges)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) StreamConfig(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Proxy_StreamConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[4], "/proxy.Proxy/StreamConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &ProxyStreamConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Proxy_StreamConfigClient interface {
	Recv() (*Bridges, error)
	grpc.ClientStream
}

type ProxyStreamConfigClient struct {
	grpc.ClientStream
}

func (x *ProxyStreamConfigClient) Recv() (*Bridges, error) {
	m := new(Bridges)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Logout(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	Ver(context.Context, *Noop) (*Noop, error)
	Proxy(Proxy_ProxyServer) error
	ReverseProxyListen(Proxy_ReverseProxyListenServer) error
	ReverseProxyWork(Proxy_ReverseProxyWorkServer) error
	Ping(context.Context, *StringMsg) (*StringMsg, error)
	PortScan(context.Context, *StringMsg) (*StringMsg, error)
	Nc(context.Context, *StringMsg) (*StringMsg, error)
	SpeedTest(context.Context, *StringMsg) (*BytesMsg, error)
	KeepAlive(*Noop, Proxy_KeepAliveServer) error
	GetConfigs(context.Context, *Noop) (*Bridges, error)
	StreamConfig(*Noop, Proxy_StreamConfigServer) error
	Login(context.Context, *LoginReq) (*StringMsg, error)
	Logout(context.Context, *StringMsg) (*Noop, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) Ver(context.Context, *Noop) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ver not implemented")
}
func (UnimplementedProxyServer) Proxy(Proxy_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedProxyServer) ReverseProxyListen(Proxy_ReverseProxyListenServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseProxyListen not implemented")
}
func (UnimplementedProxyServer) ReverseProxyWork(Proxy_ReverseProxyWorkServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseProxyWork not implemented")
}
func (UnimplementedProxyServer) Ping(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedProxyServer) PortScan(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortScan not implemented")
}
func (UnimplementedProxyServer) Nc(context.Context, *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nc not implemented")
}
func (UnimplementedProxyServer) SpeedTest(context.Context, *StringMsg) (*BytesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeedTest not implemented")
}
func (UnimplementedProxyServer) KeepAlive(*Noop, Proxy_KeepAliveServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedProxyServer) GetConfigs(context.Context, *Noop) (*Bridges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigs not implemented")
}
func (UnimplementedProxyServer) StreamConfig(*Noop, Proxy_StreamConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamConfig not implemented")
}
func (UnimplementedProxyServer) Login(context.Context, *LoginReq) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedProxyServer) Logout(context.Context, *StringMsg) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_Ver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Ver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Ver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Ver(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).Proxy(&ProxyProxyServer{stream})
}

type Proxy_ProxyServer interface {
	Send(*ConnIn) error
	Recv() (*ConnOut, error)
	grpc.ServerStream
}

type ProxyProxyServer struct {
	grpc.ServerStream
}

func (x *ProxyProxyServer) Send(m *ConnIn) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ProxyProxyServer) Recv() (*ConnOut, error) {
	m := new(ConnOut)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_ReverseProxyListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).ReverseProxyListen(&ProxyReverseProxyListenServer{stream})
}

type Proxy_ReverseProxyListenServer interface {
	Send(*RevProxyRequest) error
	Recv() (*ConnOut, error)
	grpc.ServerStream
}

type ProxyReverseProxyListenServer struct {
	grpc.ServerStream
}

func (x *ProxyReverseProxyListenServer) Send(m *RevProxyRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ProxyReverseProxyListenServer) Recv() (*ConnOut, error) {
	m := new(ConnOut)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_ReverseProxyWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).ReverseProxyWork(&proxyReverseProxyWorkServer{stream})
}

type Proxy_ReverseProxyWorkServer interface {
	Send(*RevProxyConnOut) error
	Recv() (*RevProxyConnIn, error)
	grpc.ServerStream
}

type proxyReverseProxyWorkServer struct {
	grpc.ServerStream
}

func (x *proxyReverseProxyWorkServer) Send(m *RevProxyConnOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyReverseProxyWorkServer) Recv() (*RevProxyConnIn, error) {
	m := new(RevProxyConnIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Ping(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_PortScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).PortScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/PortScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).PortScan(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Nc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Nc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Nc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Nc(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_SpeedTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SpeedTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/SpeedTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SpeedTest(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_KeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServer).KeepAlive(m, &ProxyKeepAliveServer{stream})
}

type Proxy_KeepAliveServer interface {
	Send(*StringMsg) error
	grpc.ServerStream
}

type ProxyKeepAliveServer struct {
	grpc.ServerStream
}

func (x *ProxyKeepAliveServer) Send(m *StringMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Proxy_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetConfigs(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_StreamConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServer).StreamConfig(m, &ProxyStreamConfigServer{stream})
}

type Proxy_StreamConfigServer interface {
	Send(*Bridges) error
	grpc.ServerStream
}

type ProxyStreamConfigServer struct {
	grpc.ServerStream
}

func (x *ProxyStreamConfigServer) Send(m *Bridges) error {
	return x.ServerStream.SendMsg(m)
}

func _Proxy_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Logout(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ver",
			Handler:    _Proxy_Ver_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Proxy_Ping_Handler,
		},
		{
			MethodName: "PortScan",
			Handler:    _Proxy_PortScan_Handler,
		},
		{
			MethodName: "Nc",
			Handler:    _Proxy_Nc_Handler,
		},
		{
			MethodName: "SpeedTest",
			Handler:    _Proxy_SpeedTest_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Proxy_GetConfigs_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Proxy_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Proxy_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proxy",
			Handler:       _Proxy_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReverseProxyListen",
			Handler:       _Proxy_ReverseProxyListen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReverseProxyWork",
			Handler:       _Proxy_ReverseProxyWork_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "KeepAlive",
			Handler:       _Proxy_KeepAlive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamConfig",
			Handler:       _Proxy_StreamConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "misc/proto/service_server.proto",
}
